#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('its-alive:server');
var http = require('http');

var ping = require('ping');
var cron = require('cron');
var db = require('../models');

var job = new cron.CronJob('*/20 * * * * *', function() {
  var date = new Date(new Date() - 300000);

  function checkStatus(service) {
    return ping.promise.probe(service.ipaddress)
      .then(function(res) {
        if (res.alive) {
          if (service.status == "down") {
            service.updateAttributes({status: 'warning'});
          }
          else {
            service.updateAttributes({status: 'up'});
          }
        }
        else {
          if (service.status == "up") {
            service.updateAttributes({status: 'warning'});
          }
          else {
            service.updateAttributes({status: 'down'});
          }
        }
      });
  }
  db.Service.findAll({where:
    {
      updatedAt: {
        $lt: date
      }
    }
  })
  .then(function(services) {
    if (!services) {}
    else {
      for (var c =0; c<services.length; c++) {
        checkStatus(services[c]);
      }
    }
  })
  .catch(function(err){
    console.log(err);
  });
}, null, true, 'America/toronto');

job.start();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
